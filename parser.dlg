<<
/* parser.dlg -- DLG Description of scanner
 *
 * Generated from: numlistlang2_interpret2.g
 *
 * Terence Parr, Will Cohen, and Hank Dietz: 1989-2001
 * Purdue University Electrical Engineering
 * With AHPCRC, University of Minnesota
 * ANTLR Version 1.33MR33
 */

#define ANTLR_VERSION	13333
#include "pcctscfg.h"
#include "pccts_stdio.h"

#include <string>
#include <iostream>
#include <map>
#include <vector>
using namespace std;



// struct to store information about tokens
typedef struct {
  string kind;
  string text;
} Attrib;

// function to fill token information (predeclaration)
void zzcr_attr(Attrib *attr, int type, char *text);

// fields for AST nodes
#define AST_FIELDS string kind; string text;
#include "ast.h"

// macro to create a new AST node (and function predeclaration)
#define zzcr_ast(as,attr,ttype,textt) as=createASTnode(attr,ttype,textt)
AST* createASTnode(Attrib* attr, int ttype, char *textt);
#define createASTlist (*_root)=new AST;((*_root))->kind="list";((*_root))->right=NULL;((*_root))->down=_sibling;
#include "antlr.h"
#include "ast.h"
#include "tokens.h"
#include "dlgdef.h"
LOOKAHEAD

void
#ifdef __USE_PROTOS
zzerraction(void)
#else
zzerraction()
#endif
{
	(*zzerr)("invalid token");
	zzadvance();
	zzskip();
}
>>


%%START

@
	<<
		NLA = 1;
	>>

=
	<<
		NLA = ASSIGNMENT;
	>>

if
	<<
		NLA = IF_KEYWORD;
	>>

while
	<<
		NLA = WHILE_KEYWORD;
	>>

\(
	<<
		NLA = OPAR;
	>>

\)
	<<
		NLA = CPAR;
	>>

then
	<<
		NLA = THEN_KEYWORD;
	>>

endif
	<<
		NLA = ENDIF_KEYWORD;
	>>

do
	<<
		NLA = DO_KEYWORD;
	>>

endwhile
	<<
		NLA = ENDWHILE_KEYWORD;
	>>

flatten
	<<
		NLA = FLATTEN_KEYWORD;
	>>

print
	<<
		NLA = PRINT_KEYWORD;
	>>

lreduce
	<<
		NLA = LREDUCE_KEYWORD;
	>>

lmap
	<<
		NLA = LMAP_KEYWORD;
	>>

lfilter
	<<
		NLA = LFILTER_KEYWORD;
	>>

head
	<<
		NLA = HEAD_KEYWORD;
	>>

pop
	<<
		NLA = POP_KEYWORD;
	>>

empty
	<<
		NLA = EMPTY_KEYWORD;
	>>

\+
	<<
		NLA = SUM;
	>>

\-
	<<
		NLA = MINUS;
	>>

\*
	<<
		NLA = MUL;
	>>

==
	<<
		NLA = EQUAL;
	>>

!=
	<<
		NLA = NEQUAL;
	>>

>
	<<
		NLA = GREATER;
	>>

<
	<<
		NLA = LESSER;
	>>

not
	<<
		NLA = NOT_KEYWORD;
	>>

and
	<<
		NLA = AND_KEYWORD;
	>>

or
	<<
		NLA = OR_KEYWORD;
	>>

#
	<<
		NLA = CONCATTAG;
	>>

[a-zA-Z][a-zA-Z0-9]*
	<<
		NLA = ID;
	>>

[0-9]+
	<<
		NLA = NUM;
	>>

\[
	<<
		NLA = OBRACKET;
	>>

\]
	<<
		NLA = CBRACKET;
	>>

,
	<<
		NLA = COMMA;
	>>

[\ \n]
	<<
		NLA = SPACE;
    zzskip();   
	>>

%%
